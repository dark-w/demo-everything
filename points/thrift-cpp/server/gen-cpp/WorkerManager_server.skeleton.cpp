// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "WorkerManager.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::freebird;

class WorkerManagerHandler : virtual public WorkerManagerIf {
 public:
  WorkerManagerHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  int32_t max(const int32_t a, const int32_t b) {
    // Your implementation goes here
    printf("max\n");
    return a >= b ? a : b;
  }

  int32_t gcd(const int32_t p, const int32_t q) {
    // Your implementation goes here
    printf("gcd\n");
    
    if (0 == q)
      return p;

    int32_t r = p % q;
    return gcd(q, r);
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<WorkerManagerHandler> handler(new WorkerManagerHandler());
  ::std::shared_ptr<TProcessor> processor(new WorkerManagerProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

